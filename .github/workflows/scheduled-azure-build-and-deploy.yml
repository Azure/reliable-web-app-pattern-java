
# This workflow installs the latest version of Terraform CLI, Java 11 SDK and AZ Cli, this workflow will run
# `terraform init`, `terraform plan`, and `terraform apply` and then build teh java and deploy using
# github az webapp plugin
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#

name: 'RWA: Scheduled Build & Deploy'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'App environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod
      run_tear_down:
        description: 'When true, resources will be deleted after a run'
        required: false
        default: true
        type: boolean
  schedule:
    - cron: '0 9 * * *'
        
# https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-portal%2Clinux#set-up-azure-login-with-openid-connect-authentication
permissions:
  id-token: write
  contents: read


concurrency: integration_testing

env:
  APP_NAME: ${{ vars.AZURE_APP_NAME }}
  PROJECT_ROOT: $(pwd)
  APP_ENVIRONMENT: ${{ inputs.environment || 'dev' }}
  DATABASE_PASSWORD: ${{ vars.POSTGRES_DATABASE_PASSWORD }}
  APP_SERVICE_DEPLOY_SLOT: production
  ENABLE_TELEMETRY: true
  SUBSCRIPTION: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  APP_DEPLOY_NAME: app-${{ vars.AZURE_APP_NAME }}-${{ inputs.environment || 'dev'}}
  TRAININGS_DIR: $PROJECT_ROOT/videos

jobs:
  terraform:
    name: 'Build & deploy infra'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
        
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: print input env variables
      run: |
        echo $SUBSCRIPTION
        echo $APP_NAME
        echo $APP_ENVIRONMENT
        echo $APP_DEPLOY_NAME
        echo $DATABASE_PASSWORD
        echo $PROJECT_ROOT

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.4.6
     
     # Install the az cli with login using service principal created on az subscription
    - name: 'azure cli'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform -chdir=./terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    #- name: Terraform Format
    #  run: terraform -chdir=./terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform -chdir=./terraform plan -var application_name=$APP_NAME -var environment=$APP_ENVIRONMENT -var enable_telemetry=$ENABLE_TELEMETRY -var database_administrator_password="$DATABASE_PASSWORD" -out airsonic.tfplan -var principal_type=ServicePrincipal
       
      
    - name: Terraform Apply
      run: terraform -chdir=./terraform apply airsonic.tfplan
      
    - name: Download videos
      run: ./scripts/download-trainings.sh
      
      
    - name: Set up Java version
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Maven
      run: |
        echo ${{ github.workspace }}
        echo $GITHUB_WORKSPACE
        cd src/airsonic-advanced
        mvn -Dmaven.test.skip=true -DskipTests package
        
    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v2
      with:
        name: java-rwa
        path: '${{ github.workspace }}/src/airsonic-advanced/airsonic-main/target/*.war'
        
    - name: Download artifact from build job
      uses: actions/download-artifact@v2
      with:
        name: java-rwa
        
    - name: Deploy to Azure Web App
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.APP_DEPLOY_NAME }}
        slot-name: APP_SERVICE_DEPLOY_SLOT
        package: 'airsonic.war'

    - name: 'delete-resources'
      if: ${{ inputs.run_tear_down || github.event_name == 'schedule' }}
      run: |
        chmod +x ./scripts/devOpsScripts/delete-resources.sh
        ./scripts/devOpsScripts/delete-resources.sh -g rg-$APP_NAME-${{ inputs.environment || 'dev' }}